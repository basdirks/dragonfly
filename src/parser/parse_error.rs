/// Low-level parsing errors.
#[derive(Clone, Debug, Eq, PartialEq)]
pub enum ParseError {
    /// A custom error.
    CustomError {
        /// A description of the error.
        message: String,
        /// The input that was being parsed.
        input: String,
    },
    /// Unexpected end of file.
    UnexpectedEof,
    /// The predicate does not apply to first character of the input.
    ///
    /// aka `ParseError::DaBoiIsNotHappyWithThisOne` -- @Fecony
    UnmetPredicate {
        /// The character that was found.
        actual: char,
        /// A description of the predicate.
        message: String,
    },
    /// The input does not match the given character.
    UnmatchedChar {
        /// The character that was found.
        actual: char,
        /// The expected character.
        expected: char,
    },
    /// None of the given parsers matched the input.
    UnmatchedChoice {
        /// The errors generated by each parser.
        errors: Vec<ParseError>,
    },
    /// The input does not match the given string literal.
    UnmatchedLiteral {
        /// The expected string literal.
        expected: String,
    },
}
